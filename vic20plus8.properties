# Prog8 target configuration file for a Commodore VIC20 wth an extra 8KB.

cpu = 6502
encoding = petscii
load_address = $1201
# ram        $0000-$03ff
# hole       $0400-$0fff
# screen ram $1000-$11ff
# ram        $1200-$1fff
# cx16 regs  $1217-$1236
# ram cart   $2000-$3fff
memtop = $4000
bss_highram_start = 0
bss_highram_end = 0
bss_goldenram_start = 0
bss_goldenram_end = 0

# io_regions specifies memory-mapped I/O registers that should be treated differentely.
# it can be zero or more memory address ranges (inclusive) separated by comma
# $8000-$8fff = character rom
# $9000-$93ff = VIC, VIAs
# $9400-$97ff = color ram
# $9800-$9fff = I/O2, I/O3
io_regions = $9000-$93ff,$9800-$9fff

# zeropage scratch variables. zp_scratch_reg must always be zp_scratch_b1+1 !
;zp_scratch_b1 = $92
;zp_scratch_reg = $93
zp_scratch_b1 = $4e
zp_scratch_reg = $4f
zp_scratch_w1 = $fb
zp_scratch_w2 = $fd

# free zeropage locations for the various zp usage methods
# zero or more zeropage address ranges (inclusive).
zp_fullsafe = $02-$90,$92-$9f,$a3-$bf,$c1,$c2,$c3,$c4,$c6-$ca,$cf-$f4,$f7-$ff
zp_kernalsafe = $02-$25,$39-$48,$4b-$4f,$51,$52,$53,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f,$60-$8f,$ff
zp_basicsafe = $0a,$92,$93,$96,$9b,$9c,$9e,$9f,$a6,$b0,$b1,$be,$f9, $fa

# the start of the 32 bytes used by the R0-R15 virtual registers. Can be in Zeropage or elsewhere.
virtual_registers = $1217

# Where can we find the standard library (syslib.p8). You can still add more paths manually using -srcdirs
library = ./libraries/vic20plus8

# if a non-empty custom launcher code string is supplied, the compiler won't output ANY launcher / init code by itself,
# and instead outputs whatever is specified here. (You can use \n here for newline and \ for line continuantions)
custom_launcher_code =        .word  (+), 2025\n        .null  $9e, format(' %d ', prog8_entrypoint), $3a, $8f, ' prog8' \n+       .word  0\n        .fill  32 ; cx16 virtual registers\nprog8_entrypoint\n        cld\n        tsx  ; save stackpointer for sys.exit()\n        stx  prog8_lib.orig_stackpointer\n        jsr  p8_sys_startup.init_system\n        jsr  p8_sys_startup.init_system_phase2\n        jsr  p8b_main.p8s_start\n        jmp  p8_sys_startup.cleanup_at_exit

# additional options passed to the assembler program
assembler_options =
